// Code generated by protoc-gen-graphql. DO NOT EDIT.
// source: example/example.proto

package example

import (
	"context"
	"github.com/samsarahq/thunder/graphql/schemabuilder"
	"github.com/srikrsna/protoc-gen-graphql/gtypes"
)

// To ensure packages are used so that the Go compiler doesn't throw an error
var _ = context.TODO

func init() {
	RegisterGqlTypes(gtypes.Schema)
}

func RegisterGqlTypes(s *schemabuilder.Schema) {
	RegisterExample(s)
	RegisterReference(s)
	RegisterEchoRequest(s)
	RegisterEchoResponse(s)
	RegisterGreetRequest(s)
	RegisterGreetResponse(s)
	RegisterEnumTest(s)
	RegisterExample_First(s)
	RegisterExample_Second(s)
}

func RegisterExample(s *schemabuilder.Schema) {
	obj := s.Object("Example", Example{})
	obj.Description = `Example description`
	obj.Key("id")

	obj.FieldFunc("value", func(self *Example) *unionExampleValue {
		switch v := self.Value.(type) {

		case *Example_First:
			return &unionExampleValue{
				Example_First: v,
			}
		case *Example_Second:
			return &unionExampleValue{
				Example_Second: v,
			}
		}
		return nil
	})
}

func RegisterReference(s *schemabuilder.Schema) {
	obj := s.Object("Reference", Reference{})
	obj.Description = ``

}

func RegisterEchoRequest(s *schemabuilder.Schema) {
	obj := s.Object("EchoRequest", EchoRequest{})
	obj.Description = ``

}

func RegisterEchoResponse(s *schemabuilder.Schema) {
	obj := s.Object("EchoResponse", EchoResponse{})
	obj.Description = ``

}

func RegisterGreetRequest(s *schemabuilder.Schema) {
	obj := s.Object("GreetRequest", GreetRequest{})
	obj.Description = ``
	obj.Key("id")

}

func RegisterGreetResponse(s *schemabuilder.Schema) {
	obj := s.Object("GreetResponse", GreetResponse{})
	obj.Description = ``

}

func RegisterEnumTest(s *schemabuilder.Schema) {
	s.Enum(EnumTest(0), map[string]interface{}{
		"DEFAULT":   EnumTest_DEFAULT,
		"VALUE_ONE": EnumTest_VALUE_ONE,
		"SKIP_ONE":  EnumTest_SKIP_ONE,
	})
}

type unionExampleValue struct {
	schemabuilder.Union
	*Example_First
	*Example_Second
}

func RegisterExample_First(s *schemabuilder.Schema) {
	s.Object("Example_First", Example_First{})
}
func RegisterExample_Second(s *schemabuilder.Schema) {
	s.Object("Example_Second", Example_Second{})
}

func StitchExampleServiceSchema(s *schemabuilder.Schema, cli ExampleServiceClient) {

	s.Query().FieldFunc("greet", func(ctx context.Context, args struct {
		In *GreetRequest
	}) (*GreetResponse, error) {
		return cli.Greet(ctx, args.In)
	})

	s.Mutation().FieldFunc("echo", func(ctx context.Context, args struct {
		In *EchoRequest
	}) (*EchoResponse, error) {
		return cli.Echo(ctx, args.In)
	})
}
